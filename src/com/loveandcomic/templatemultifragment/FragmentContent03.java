package com.loveandcomic.templatemultifragment;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;


/**
 * 標準的なフラグメント
 *
 */
public class FragmentContent03 extends AbsFragmentWithCommonNavi{

	///////////////////////////////////////////////////////////
	//フィールド インナークラスでも使いたい変数はフィールドに
	///////////////////////////////////////////////////////////
	//継承されたフィールド（一例 詳しくは AbsFragmentWithCommonVariable 参照）
	//◆Activity my_activity //フラグメントの持ち主となるアクティビティ
	//◆Fragment my_fragment //フラグメント自身
	//◆Context  my_context  //持ち主のアクティビティのコンテキスト

	//◆LayoutInflater inflater  //レイアウトインフレーター
	//◆ViewFlipper view_flipper //枠になるビューフリッパーインスタンス
	//◆Animation in_from_left   //アニメーション定義インスタンス
	//◆Animation in_from_right  //アニメーション定義インスタンス
	//◆Animation out_to_left    //アニメーション定義インスタンス
	//◆Animation out_to_right   //アニメーション定義インスタンス
	//◆Button return_button  //「戻る」ボタン

	///////////////////////////////////////////////////////////
	//メソッド コンストラクタ
	///////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////
	//メソッド ライフサイクル順
	///////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル01：onAttach()
	 * フラグメントがアクティビティから最初に取り付けられた時に
	 * 呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル02：onCreate()
	 * システムがフラグメントを作成した時に呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル03：onCreateView()
	 * フラグメントが画面描画をはじめて行ったタイミングで
	 * 呼び出される。
	 *
	 * 【重要】
	 * フラグメントを使用する時、クラスに記述するべき
	 * 中心的メソッド。
	 *
	 * inflater.inflate()で取得するViewを戻す。
	 * そのとき、リソースのレイアウトXMLを指定する。
	 *
	 * 戻り値がViewになっている。ここで返されたViewが描画される。
	 */
	@Override
	public View onCreateView(
		LayoutInflater inflater,
		ViewGroup container,
		Bundle savedInstanceState
	){

		//レイアウトインフレーターオブジェクトに、用意したフラグメントのレイアウトXMLと、ビューグループインスタンスとを渡す。
		//レイアウトインフレーインスタンスのinflate()メソッドは、ビューのレイアウトXMLを読み込むための（インプットの）手続き。
		//リソース（XML）が第一引数、ビューグループが第二引数
		View rootView = inflater.inflate(
			R.layout.fragment_content03, //レイアウトXMLのファイル名
			container,                   //ビューグループインスタンス
			false
		);
		return rootView;
	}//function


	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル04：onActivityCreated()
	 * 呼び出し元になるActivityのonCreateメソッドが完了したら
	 * 呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル05：onViewStateRestored()
	 * フラグメントのビュー階層の状態が復元されるときに
	 * 呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル06：onStart()
	 * フラグメントがユーザーに見えるように生成された
	 * タイミングで呼び出される。
	 *
	 * アニメーションの開始など、表示に関わる初期化処理を行う。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル07：onResume()
	 * アクティビティがバックグラウンドからフォアグラウンドに
	 * 移るタイミングで呼び出される。
	 *
	 * イベントリスナーの登録、タイマーの開始やデータの読み込みを行う。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル08：onPause()
	 * Activityがバックグラウンドに移ったか、もしくは
	 * アクティビティ内のフラグメントを変更する操作を行うことで
	 * ユーザーとの対話がされなくなった場合に呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル09：onStop()
	 * アクティビティが停止したか、もしくはアクティビティ内の
	 * フラグメントを変更する操作を行うことでユーザーに表示され
	 * なくなった場合に呼び出される。
	 *
	 * メモリを食うインスタンスの開放など
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル10：onDestroyView()
	 * フラグメントのリソースをクリアする場合に呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル11：onDestroy()
	 * フラグメントの状態が初期化される場合に呼び出される。
	 */

	///////////////////////////////////////////////////////////
	/**
	 * ライフサイクル12：onDetach()
	 * フラグメントがアクティビティから剥がされる直前に
	 * 呼び出される。
	 */


	///////////////////////////////////////////////////////////
	//メソッド 非ライフサイクル
	//抽象クラスの継承やインターフェイスの実装により
	//オーバーライドが義務化されるメソッドなど
	///////////////////////////////////////////////////////////
	/**
	 *
	 *
	 */

	///////////////////////////////////////////////////////////
	//クラス内クラス
	//タイマー処理などとの連携用
	///////////////////////////////////////////////////////////
	/**
	 *
	 *
	 */

}//class
